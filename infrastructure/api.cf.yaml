AWSTemplateFormatVersion: 2010-09-09
Parameters:
  s3CodeVersion:
    Type: String
  hostedZoneId:
    Type: AWS::Route53::HostedZone::Id
  lambdaBucket:
    Type: String
  apiDomain:
    Type: String
    Default: api.stage.jur.onl
  environment:
    Type: String
    Default: stage
  signingSecretString:
    Type: String

Resources:
  apiGatewayV2:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub '${environment}-jnl-api-gateway'
      ProtocolType: HTTP
      Target: !Sub
        - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
        - lambdaArn: !GetAtt lambdaFunction.Arn

  sslCert:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref apiDomain
      DomainValidationOptions:
        - DomainName: !Ref apiDomain
          ValidationDomain: !Ref apiDomain
      ValidationMethod: DNS

  apiGatewayDomain:
    Type: 'AWS::ApiGatewayV2::DomainName'
    Properties:
      DomainName: !Ref apiDomain
      DomainNameConfigurations:
        - EndpointType: REGIONAL
          CertificateArn: !Ref sslCert

  apiGatewayDomainMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId: !Ref apiGatewayV2
      DomainName: !Ref apiDomain
      Stage: $default
    DependsOn:
      - apiGatewayDNS

  apiGatewayDNS:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref hostedZoneId
      Name: !Ref apiDomain
      AliasTarget:
        DNSName: !GetAtt apiGatewayDomain.RegionalDomainName
        HostedZoneId: !GetAtt apiGatewayDomain.RegionalHostedZoneId
        EvaluateTargetHealth: false
      Type: A

  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref lambdaBucket
        S3Key: deployment.zip
        S3ObjectVersion: !Ref s3CodeVersion
      Role: !GetAtt lambdaRole.Arn
      Runtime: python3.8
      Handler: lambda_function.main
      FunctionName: !Sub '${environment}-jnl-api'
      MemorySize: 1024
      Environment:
        Variables:
          dynamoTableName: !Ref messagesDynamoTable
          signingSecret: !Ref signingSecretString
          apiDomain: !Ref apiDomain

  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGatewayV2}/*

  lambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${environment}-jnl-api:*
          PolicyName: lambda
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - dynamodb:GetItem
                  - dynamodb:DescribeTable
                  - dynamodb:UpdateItem
                  - dynamodb:PutItem
                Effect: Allow
                Resource:
                  - !GetAtt messagesDynamoTable.Arn
          PolicyName: lambda-dynamo

  lambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${environment}-jnl-api'
      RetentionInDays: 180

  messagesDynamoTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: pigeonhole_name
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: pigeonhole_name
          AttributeType: S
